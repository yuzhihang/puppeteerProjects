这是 UI 自动化测试最常用的功能了，Puppeteer 的处理也相当简单

page.$(selector)
page.$$(selector)
这两个函数分别会在页面内执行 document.querySelector 和 document.querySelectorAll，但返回值却不是 DOM 对象，如同 jQuery 的选择器，返回的是经过自己包装的 Promise<ElementHandle>，ElementHandle 帮我们封装了常用的 click 、boundingBox 等方法

获取 DOM 属性
我们写爬虫爬取页面图片列表，感觉可以通过 page.$$(selector) 获取到页面的元素列表，然后再去转成 DOM 对象，获取 src，然后并不行，想做对获取元素对应 DOM 属性的获取，需要用专门的 API

page.$eval(selector, pageFunction[, ...args])
page.$$eval(selector, pageFunction[, ...args])
大概用法

const searchValue = await page.$eval('#search', el => el.value);
const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
const html = await page.$eval('.main-container', e => e.outerHTML);
const divsCounts = await page.$$eval('div', divs => divs.length);
值得注意的是如果 pageFunction 返回的是 Promise，那么 page.$eval 会等待方法 resolve


// 注册 window.readfile
  await page.exposeFunction('readfile', async filePath => {
    return new Promise((resolve, reject) => {
      fs.readFile(filePath, 'utf8', (err, text) => {
        if (err)
          reject(err);
        else
          resolve(text);
      });
    });
  });

  await page.evaluate(async () => {
    // use window.readfile to read contents of a file
    const content = await window.readfile('/etc/hosts');
    console.log(content);
  });

  Puppeteer 提供了对一些页面常见事件的监听，用法和 jQuery 很类似，常用的有

  console：调用 console API
  dialog：页面出现弹窗
  error：页面 crash
  load
  pageerror：页面内未捕获错误

  {"retCode":"500003","retMsg":"not login.but must login.sso flag."}
  jQuery031860332404474234_1540867101828({"data":null,"retCode":"520001","retMsg":"临时身份凭证不存在。","sOperTime":null})